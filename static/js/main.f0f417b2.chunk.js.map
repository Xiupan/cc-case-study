{"version":3,"sources":["store/sagas/Map.js","store/actions.js","store/index.js","store/sagas/index.js","store/reducers/Map.js","utils/buildReducer.js","components/Map.js","components/index.js","App.js","serviceWorker.js","index.js"],"names":["selectNextMap","watcherSaga","action","payload","availableStyles","currentIndex","nextStyleIndex","length","put","type","selectedStyle","console","log","takeEvery","composeEnhancers","MapSaga","setMapLat","produce","draft","lat","setMapLng","lng","setMapZoom","zoom","setSelectedStyle","buildReducer","initial","handlers","state","handler","index","url","name","sagaMiddleware","createSagaMiddleware","clientEnv","location","hostname","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","trace","traceLimit","compose","reducers","combineReducers","map","rootReducer","mapboxgl","accessToken","process","styles","width","height","position","MapComponent","dispatch","useDispatch","mapData","useSelector","selectedMapStyle","useState","setMap","mapContainer","useRef","useEffect","Map","container","current","style","center","on","resize","initializeMap","Grid","spacing","direction","justify","alignItems","item","xs","Typography","variant","gutterBottom","align","margin","Button","color","onClick","ref","el","RootComponent","props","Fragment","store","createStore","applyMiddleware","sagas","forEach","run","App","Boolean","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f0f417b2.chunk.js","sourcesContent":["import { takeEvery, put } from \"redux-saga/effects\";\nimport * as actions from \"../actions\";\n\nfunction* selectNextMap(action) {\n  try {\n    const { availableStyles, currentIndex } = action.payload;\n    let nextStyleIndex =\n      currentIndex + 1 > availableStyles.length - 1 ? 0 : currentIndex + 1;\n\n    yield put({\n      type: \"SET_SELECTED_STYLE\",\n      payload: { selectedStyle: availableStyles[nextStyleIndex] }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* watcherSaga() {\n  yield takeEvery(actions[\"REQUEST_NEXT_MAP\"], selectNextMap);\n}\n\nexport default [watcherSaga];\n","export const REQUEST_SOME_ACTION = \"REQUEST_SOME_ACTION\";\nexport const SET_MAP_LNG = \"SET_MAP_LNG\";\nexport const SET_MAP_LAT = \"SET_MAP_LAT\";\nexport const SET_MAP_ZOOM = \"SET_MAP_ZOOM\";\nexport const SET_DATA = \"SET_DATA\";\nexport const SET_SELECTED_STYLE = \"SET_SELECTED_STYLE\";\nexport const REQUEST_NEXT_MAP = \"REQUEST_NEXT_MAP\";\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport sagas from \"./sagas\";\n\nimport map from \"./reducers/Map\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst suffixes = {\n  \"my-future-url-dev.com\": \"stg\",\n  \"my-future-url.com\": \"production\"\n};\n\n// eslint-disable-next-line no-restricted-globals\nconst clientEnv = suffixes[location.hostname] || \"local\";\n\nlet composeEnhancers;\nif (clientEnv === \"local\") {\n  composeEnhancers =\n    (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\n      window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        trace: true,\n        traceLimit: 25\n      })) ||\n    compose;\n} else {\n  composeEnhancers = compose;\n}\n\nconst reducers = combineReducers({\n  map\n});\n\nconst rootReducer = (state, action) => {\n  return reducers(state, action);\n};\n\nexport default () => {\n  const store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(sagaMiddleware))\n  );\n\n  sagas.forEach(sagaMiddleware.run);\n  return store;\n};\n","import MapSaga from \"./Map\";\n\nexport default [...MapSaga];\n","import { buildReducer } from \"../../utils/buildReducer\";\nimport produce from \"immer\";\nimport * as actions from \"../actions\";\n\nconst initialState = {\n  lat: 38.0,\n  lng: -97.0,\n  zoom: 3.75,\n  availableStyles: [\n    {\n      index: 0,\n      url: \"mapbox://styles/xiupan/ckau8akp02sxa1itd90uq0dqj/draft\",\n      name: \"Number of Deaths\"\n    },\n    {\n      index: 1,\n      url: \"mapbox://styles/xiupan/ckatvrt2331411ipf1kvl6kpa/draft\",\n      name: \"Number of Hospitalized\"\n    }\n  ],\n  selectedStyle: {\n    index: 0,\n    url: \"mapbox://styles/xiupan/ckau8akp02sxa1itd90uq0dqj/draft\",\n    name: \"Number of Deaths\"\n  }\n};\n\nconst setMapLat = produce((draft, action) => {\n  draft.lat = action.payload.lat;\n  return draft;\n});\n\nconst setMapLng = produce((draft, action) => {\n  draft.lng = action.payload.lng;\n  return draft;\n});\n\nconst setMapZoom = produce((draft, action) => {\n  draft.zoom = action.payload.zoom;\n  return draft;\n});\n\nconst setSelectedStyle = produce((draft, action) => {\n  draft.selectedStyle = action.payload.selectedStyle;\n  return draft;\n});\n\nconst handlers = {\n  [actions.SET_MAP_LAT]: setMapLat,\n  [actions.SET_MAP_LNG]: setMapLng,\n  [actions.SET_MAP_ZOOM]: setMapZoom,\n  [actions.SET_SELECTED_STYLE]: setSelectedStyle\n};\n\nexport default buildReducer(initialState, handlers);\n","export const buildReducer = (initial, handlers) => {\n  return (state = initial, action) => {\n    const handler = handlers[action.type];\n    if (typeof handler === \"undefined\") return state;\n    return handler(state, action);\n  };\n};\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { Typography, Button, Grid } from \"@material-ui/core\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport mapboxgl from \"mapbox-gl\";\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_KEY;\n\nconst styles = {\n  width: \"100vw\",\n  height: \"calc(100vh - 80px)\",\n  position: \"absolute\"\n};\n\nexport const MapComponent = () => {\n  const dispatch = useDispatch();\n  const mapData = useSelector(state => state.map);\n  const selectedMapStyle = useSelector(state => state.map.selectedStyle);\n  const [map, setMap] = useState(null);\n  const mapContainer = useRef(null);\n\n  useEffect(() => {\n    const initializeMap = ({ setMap, mapContainer }) => {\n      const map = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: selectedMapStyle.url,\n        center: [mapData.lng, mapData.lat],\n        zoom: mapData.zoom\n      });\n\n      map.on(\"load\", () => {\n        setMap(map);\n        map.resize();\n      });\n    };\n\n    if (!map) initializeMap({ setMap, mapContainer });\n  }, [map, mapData, selectedMapStyle]);\n\n  return (\n    <div>\n      <Grid\n        container\n        spacing={6}\n        direction=\"row\"\n        justify=\"space-between\"\n        alignItems=\"center\"\n      >\n        <Grid item xs>\n          <Typography\n            variant=\"h5\"\n            gutterBottom\n            style={{ align: \"center\", margin: \"5px\" }}\n          >\n            {selectedMapStyle.name}\n          </Typography>\n        </Grid>\n        <Grid item xs>\n          <Typography\n            variant=\"h5\"\n            gutterBottom\n            style={{ align: \"center\", margin: \"5px\" }}\n          >\n            COVID-19 Data (May 28, 2020)\n          </Typography>\n        </Grid>\n        <Grid item xs>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            style={{ margin: \"5px\" }}\n            onClick={() => {\n              dispatch({\n                type: \"REQUEST_NEXT_MAP\",\n                payload: {\n                  currentIndex: selectedMapStyle.index,\n                  availableStyles: mapData.availableStyles\n                }\n              });\n              setMap(null);\n            }}\n          >\n            Next Map Layer\n          </Button>\n        </Grid>\n      </Grid>\n      <div ref={el => (mapContainer.current = el)} style={styles} />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { MapComponent } from \"./Map\";\n\nexport const RootComponent = (props) => {\n  return (\n    <React.Fragment>\n      <MapComponent />\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport createStore from \"./store\";\nimport { RootComponent } from \"./components\";\n\nconst store = createStore();\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <RootComponent />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}